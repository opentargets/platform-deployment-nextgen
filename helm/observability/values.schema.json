{
  "$schema": "https://json-schema.org/draft/2019-09/schema",
  "type": "object",
  "title": "Observability Helm Chart Values Schema",
  "description": "Schema for Observability Helm chart values configuration",
  "properties": {
    "grafana": {
      "type": "object",
      "description": "Custom configuration for Grafana Helm chart",
      "properties": {
        "sidecar": {
          "type": "object",
          "description": "Configuration for Grafana sidecar",
          "properties": {
            "dashboards": {
              "type": "object",
              "description": "Configuration for dashboards sidecar",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "If true, enables the dashboards sidecar"
                },
                "label": {
                  "type": "string",
                  "description": "Label to identify ConfigMaps containing Grafana dashboards"
                }
              },
              "additionalProperties": true
            },
            "datasources": {
              "type": "object",
              "description": "Configuration for datasources sidecar",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "If true, enables the datasources sidecar"
                },
                "label": {
                  "type": "string",
                  "description": "Label to identify ConfigMaps containing Grafana datasources"
                }
              },
              "additionalProperties": true
            }
          },
          "additionalProperties": true
        }
      }
    },
    "prometheus": {
      "type": "object",
      "description": "Custom configuration for Prometheus Helm chart",
      "properties": {
        "configmapReload": {
          "type": "object",
          "description": "Configuration for configmap-reload sidecar"
        },
        "server": {
          "type": "object",
          "description": "Setting the container image for Prometheus server",
          "properties": {
            "persistentVolume": {
              "type": "object",
              "description": "Persistent volume configuration",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "If true, Prometheus server will create/use a Persistent Volume Claim"
                },
                "size": {
                  "type": "string",
                  "description": "Prometheus server data Persistent Volume size",
                  "pattern": "^\\d+(\\.\\d+)?(Gi|Mi|Ki|Ti|Pi|Ei)$"
                },
                "storageClass": {
                  "type": "string",
                  "description": "Prometheus server data Persistent Volume Storage Class. If defined, storageClassName: <storageClass> If set to '-', storageClassName: '', which disables dynamic provisioning If undefined (the default) or set to null, no storageClassName spec is set, choosing the default provisioner. (gp2 on AWS, standard on  GKE, AWS & OpenStack)"
                }
              },
              "additionalProperties": true
            },
            "retention": {
              "type": "string",
              "description": "Prometheus data retention period (default if not specified is 15 days)",
              "pattern": "^\\d+[dhms]$"
            }
          },
          "additionalProperties": true
        },
        "serverFiles": {
          "type": "object",
          "description": "Prometheus server configuration files",
          "properties": {
            "prometheus.yml": {
              "type": "object",
              "description": "Main Prometheus configuration",
              "properties": {
                "scrape_configs": {
                  "type": "array",
                  "description": "Scrape configurations for Prometheus",
                  "items": {
                    "$ref": "#/$defs/scrapeConfig"
                  }
                }
              },
              "additionalProperties": true
            }
          },
          "additionalProperties": true
        }
      }
    },
    "additionalProperties": true
  },
  "additionalProperties": true,
  "$defs": {
    "scrapeConfig": {
      "type": "object",
      "description": "Prometheus scrape configuration",
      "properties": {
        "job_name": {
          "type": "string",
          "description": "The job name assigned to scraped metrics"
        },
        "honor_labels": {
          "type": "boolean",
          "description": "Controls how Prometheus handles conflicts between labels"
        },
        "scheme": {
          "type": "string",
          "enum": [
            "http",
            "https"
          ],
          "description": "The protocol scheme with which to fetch metrics"
        },
        "scrape_interval": {
          "type": "string",
          "description": "How frequently to scrape targets from this job",
          "pattern": "^\\d+[smh]$"
        },
        "scrape_timeout": {
          "type": "string",
          "description": "Per-scrape timeout when scraping this job",
          "pattern": "^\\d+[smh]$"
        },
        "metrics_path": {
          "type": "string",
          "description": "The HTTP resource path on which to fetch metrics"
        },
        "static_configs": {
          "type": "array",
          "description": "List of static configurations",
          "items": {
            "type": "object",
            "properties": {
              "targets": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "Host and port for the target"
                }
              }
            }
          }
        },
        "kubernetes_sd_configs": {
          "type": "array",
          "description": "List of Kubernetes service discovery configurations",
          "items": {
            "type": "object",
            "properties": {
              "role": {
                "type": "string",
                "enum": [
                  "node",
                  "service",
                  "pod",
                  "endpoints",
                  "endpointslice",
                  "ingress"
                ],
                "description": "The role of entities that should be discovered"
              }
            }
          }
        },
        "tls_config": {
          "type": "object",
          "description": "TLS configuration",
          "properties": {
            "ca_file": {
              "type": "string",
              "description": "CA certificate to validate API server certificate with"
            },
            "insecure_skip_verify": {
              "type": "boolean",
              "description": "Disable validation of the server certificate"
            }
          },
          "additionalProperties": true
        },
        "bearer_token_file": {
          "type": "string",
          "description": "Optional bearer token file authentication information"
        },
        "params": {
          "type": "object",
          "description": "Optional HTTP URL parameters",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "relabel_configs": {
          "type": "array",
          "description": "List of relabel configurations",
          "items": {
            "$ref": "#/$defs/relabelConfig"
          }
        },
        "metric_relabel_configs": {
          "type": "array",
          "description": "List of metric relabel configurations",
          "items": {
            "$ref": "#/$defs/relabelConfig"
          }
        }
      },
      "required": [
        "job_name"
      ],
      "additionalProperties": true
    },
    "relabelConfig": {
      "type": "object",
      "description": "Relabel configuration",
      "properties": {
        "source_labels": {
          "type": "array",
          "description": "The source labels select values from existing labels",
          "items": {
            "type": "string"
          }
        },
        "separator": {
          "type": "string",
          "description": "Separator placed between concatenated source label values"
        },
        "target_label": {
          "type": "string",
          "description": "Label to which the resulting value is written"
        },
        "regex": {
          "type": [
            "string",
            "number",
            "boolean"
          ],
          "description": "Regular expression against which the extracted value is matched"
        },
        "modulus": {
          "type": "integer",
          "description": "Modulus to take of the hash of the source label values"
        },
        "replacement": {
          "type": "string",
          "description": "Replacement value against which a regex replace is performed"
        },
        "action": {
          "type": "string",
          "enum": [
            "replace",
            "keep",
            "drop",
            "hashmod",
            "labelmap",
            "labeldrop",
            "labelkeep"
          ],
          "description": "Action to perform based on the regex matching"
        }
      },
      "additionalProperties": false
    }
  }
}
